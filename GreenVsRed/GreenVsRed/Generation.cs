using System;

namespace GreenVsRed
{
    public class Generation
    {
        const int green = 1;
        const int red = 0;

        private int x;
        private int y;
        private int[,] grid;
        private int x1;
        private int y1;
        private int turns;

        public Generation(int x, int y, int[,] genZero, int x1, int y1, int turns)
        {
            this.x = x;
            this.y = y;
            this.grid = genZero;
            this.x1 = x1;
            this.y1 = y1;
            this.turns = turns;
        }

        private void nextTurn()
        {
            int[,] nextGrid = new int[x, y];

            for (int i = 0; i < x; i++)
            {
                for (int j = 0; j < y; j++)
                {
                    if (nextCell(i, j) == green)
                    {
                        nextGrid[i, j] = green;
                    }
                    else if (nextCell(i, j) == red)
                    {
                        nextGrid[i, j] = red;
                    }
                    else
                    {
                        throw new ArgumentException("Invalid cell value generated by nextCell()");
                    }
                }
            }

            this.grid = nextGrid;
        }

        private int nextCell(int x, int y)
        {
            int newCell = 0;

            if (grid[x, y] == red)
            {
                int greenNeighbours = countNeigbours(x, y, green);
                if (greenNeighbours == 3 || greenNeighbours == 6)
                {
                    newCell = green;
                }
                else
                {
                    newCell = red;
                }
            }
            else if (grid[x, y] == green)
            {
                int redNeighbours = countNeigbours(x, y, red);
                if (redNeighbours == 2 || redNeighbours == 3 || redNeighbours == 6)
                {
                    newCell = green;
                }
                else
                {
                    newCell = red;
                }
            }
            else
            {
                throw new ArgumentException("Invalid cell value in grid");
            }

            return newCell;
        }

        private int countNeigbours(int x, int y, int color)
        {
            int count = 0;
            if (x - 1 >= 0 && grid[x - 1, y] == color)
            {
                count++;
                if (y - 1 >= 0 && grid[x - 1, y - 1] == color)
                {
                    count++;
                }
            }

            if (y - 1 >= 0 && grid[x, y - 1] == color)
            {
                count++;
                if (x + 1 < this.x && grid[x + 1, y - 1] == color)
                {
                    count++;
                }
            }

            if (x + 1 < this.x && grid[x + 1, y] == color)
            {
                count++;
                if (y + 1 < this.y && grid[x + 1, y + 1] == color)
                {
                    count++;
                }
            }

            if (y + 1 < this.y && grid[x, y + 1] == color)
            {
                count++;
                if (x - 1 >= 0 && grid[x - 1, y + 1] == color)
                {
                    count++;
                }
            }

            return count;
        }
    }
}
